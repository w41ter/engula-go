// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: engula/v1/engula.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngulaClient is the client API for Engula service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngulaClient interface {
	Admin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error)
}

type engulaClient struct {
	cc grpc.ClientConnInterface
}

func NewEngulaClient(cc grpc.ClientConnInterface) EngulaClient {
	return &engulaClient{cc}
}

func (c *engulaClient) Admin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/engula.v1.Engula/Admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engulaClient) Database(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*DatabaseResponse, error) {
	out := new(DatabaseResponse)
	err := c.cc.Invoke(ctx, "/engula.v1.Engula/Database", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngulaServer is the server API for Engula service.
// All implementations must embed UnimplementedEngulaServer
// for forward compatibility
type EngulaServer interface {
	Admin(context.Context, *AdminRequest) (*AdminResponse, error)
	Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error)
	mustEmbedUnimplementedEngulaServer()
}

// UnimplementedEngulaServer must be embedded to have forward compatible implementations.
type UnimplementedEngulaServer struct {
}

func (UnimplementedEngulaServer) Admin(context.Context, *AdminRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admin not implemented")
}
func (UnimplementedEngulaServer) Database(context.Context, *DatabaseRequest) (*DatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Database not implemented")
}
func (UnimplementedEngulaServer) mustEmbedUnimplementedEngulaServer() {}

// UnsafeEngulaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngulaServer will
// result in compilation errors.
type UnsafeEngulaServer interface {
	mustEmbedUnimplementedEngulaServer()
}

func RegisterEngulaServer(s grpc.ServiceRegistrar, srv EngulaServer) {
	s.RegisterService(&Engula_ServiceDesc, srv)
}

func _Engula_Admin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngulaServer).Admin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engula.v1.Engula/Admin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngulaServer).Admin(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engula_Database_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngulaServer).Database(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engula.v1.Engula/Database",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngulaServer).Database(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Engula_ServiceDesc is the grpc.ServiceDesc for Engula service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engula_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engula.v1.Engula",
	HandlerType: (*EngulaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Admin",
			Handler:    _Engula_Admin_Handler,
		},
		{
			MethodName: "Database",
			Handler:    _Engula_Database_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engula/v1/engula.proto",
}
